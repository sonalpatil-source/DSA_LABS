from collections import deque

class EventProcessingSystem:
    def __init__(self):
        self.event_queue = deque()

    def add_event(self, event):
        """Add a new event to the queue."""
        self.event_queue.append(event)
        print(f"Event '{event}' added.")

    def process_next_event(self):
        """Process and remove the oldest event in the queue."""
        if not self.event_queue:
            print("No events to process.")
            return None
        event = self.event_queue.popleft()
        print(f"Processing event: '{event}'")
        return event

    def display_pending_events(self):
        """Display all pending events in the queue."""
        if not self.event_queue:
            print("No pending events.")
        else:
            print("Pending events:")
            for idx, event in enumerate(self.event_queue, start=1):
                print(f"{idx}. {event}")

    def cancel_event(self, event):
        """Cancel an event if it is still in the queue."""
        try:
            self.event_queue.remove(event)
            print(f"Event '{event}' canceled.")
        except ValueError:
            print(f"Event '{event}' not found or already processed.")

# Example usage:
eps = EventProcessingSystem()
eps.add_event("UserLogin")
eps.add_event("FileUpload")
eps.add_event("SendEmail")
eps.display_pending_events()
eps.cancel_event("FileUpload")
eps.display_pending_events()
eps.process_next_event()
eps.display_pending_events()
