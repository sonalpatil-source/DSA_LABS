class LinearProbingHashTable:
    def __init__(self, size=10):
        self.size = size
        self.table = [None] * size
        self.DELETED = "<deleted>"  # Marker for deleted slots

    def _hash(self, key):
        return key % self.size

    def insert(self, key):
        index = self._hash(key)
        start_index = index

        while self.table[index] is not None and self.table[index] != self.DELETED:
            if self.table[index] == key:
                print(f"Key {key} already exists at index {index}.")
                return
            index = (index + 1) % self.size
            if index == start_index:
                print("Hash table is full! Cannot insert key.")
                return

        self.table[index] = key
        print(f"Inserted key {key} at index {index}.")

    def search(self, key):
        index = self._hash(key)
        start_index = index

        while self.table[index] is not None:
            if self.table[index] == key:
                print(f"Key {key} found at index {index}.")
                return True
            index = (index + 1) % self.size
            if index == start_index:
                break

        print(f"Key {key} not found.")
        return False

    def delete(self, key):
        index = self._hash(key)
        start_index = index

        while self.table[index] is not None:
            if self.table[index] == key:
                self.table[index] = self.DELETED
                print(f"Key {key} deleted from index {index}.")
                return True
            index = (index + 1) % self.size
            if index == start_index:
                break

        print(f"Key {key} not found, cannot delete.")
        return False

    def display(self):
        print("Hash Table:")
        for i, key in enumerate(self.table):
            print(f"Index {i}: {key}")

# Example usage:
ht = LinearProbingHashTable()

ht.insert(10)
ht.insert(20)
ht.insert(30)
ht.insert(40)
ht.insert(50)

ht.display()

ht.search(30)
ht.search(99)

ht.delete(30)
ht.delete(99)

ht.display()
